// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  Users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id         Int          @id @default(autoincrement())
  name       String
  email      String       @unique
  username   String
  password   String
  role       Role         @relation(fields: [roleId], references: [id])
  roleId     Int
  playerId   String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Objects    Object[]
  Posts      Post[]
  Suggestion Suggestion[]
}

model Category {
  id      Int      @id @default(autoincrement())
  title   String
  Objects Object[]
}

model Object {
  id          Int                @id @default(autoincrement())
  name        String
  category    Category           @relation(fields: [categoryId], references: [id])
  categoryId  Int
  description String
  owner       User               @relation(fields: [ownerId], references: [id])
  ownerId     Int
  photos      String[]
  posts       ObjectPost[]
  suggestions ObjectSuggestion[]
  deletedAt   DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model Post {
  id          Int          @id @default(autoincrement())
  author      User         @relation(fields: [authorId], references: [id])
  authorId    Int
  description String       @default("Pas de description")
  objects     ObjectPost[]
  suggestions Suggestion[]
  deletedAt   DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model ObjectPost {
  id        Int       @id @default(autoincrement())
  object    Object    @relation(fields: [objectId], references: [id])
  objectId  Int
  post      Post      @relation(fields: [postId], references: [id])
  postId    Int
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([objectId, postId])
  @@index([postId, objectId])
}

enum SuggestionStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Suggestion {
  id              Int                @id @default(autoincrement())
  status          SuggestionStatus   @default(PENDING)
  post            Post               @relation(fields: [postId], references: [id])
  postId          Int
  suggestedBy     User               @relation(fields: [suggestedById], references: [id])
  suggestedById   Int
  suggestedObject ObjectSuggestion[]
  deletedAt       DateTime?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model ObjectSuggestion {
  id           Int        @id @default(autoincrement())
  objectId     Int        @unique
  object       Object     @relation(fields: [objectId], references: [id])
  suggestion   Suggestion @relation(fields: [suggestionId], references: [id])
  suggestionId Int
  deletedAt    DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}
